
// return product(0,i-1) * product(i+1,len(nums)-1)
// product
func productExceptSelf(nums []int) []int {
    res := make([]int, len(nums))
    prefix := make([]int, len(nums))
    suffix := make([]int, len(nums))

    for i, _ := range nums {
        if i == 0 {
            prefix[i] = 1
            continue
        }
        prefix[i] = prefix[i-1] * nums[i-1]
    }

    for i := len(nums)-1; i>=0; i-- {
        if i == len(nums)-1 {
            suffix[i] = 1
            continue
        }
        suffix[i] = suffix[i+1] * nums[i+1]
    }

    for i , _ := range res {
        res[i] = prefix[i] * suffix[i]
    }

    return res
}