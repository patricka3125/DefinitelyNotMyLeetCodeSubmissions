func findKthLargest(nums []int, k int) int {
	heap := InitHeap(nums)

	var res int
	for i := 0; i < k; i++ {
		res = heap.Pop()
	}

	return res
}

type Heap struct {
	arr []int
}

func InitHeap(nums []int) Heap {
	h := Heap{
		arr: []int{},
	}

	for _, n := range nums {
		h.arr = append(h.arr, n)
	}

	for i := len(h.arr) - 1; i >= 1; i-- {
		if h.arr[i] > h.arr[(i-1)/2] {
			h.arr[i], h.arr[(i-1)/2] = h.arr[(i-1)/2], h.arr[i]
			h.heapify(i)
		}
	}

	return h
}

func (h *Heap) Pop() int {
	res := h.arr[0]
	h.arr[0], h.arr[len(h.arr)-1] = h.arr[len(h.arr)-1], h.arr[0]
	h.arr = h.arr[:len(h.arr)-1]

	h.heapify(0)

	return res
}

func (h *Heap) heapify(i int) {
	for {
		left, right := 2*i+1, 2*i+2
		if left >= len(h.arr) {
			return
		}

		// Take the larger child
		comp := left
		if right < len(h.arr) && h.arr[left] < h.arr[right] {
			comp = right
		}

		if h.arr[i] < h.arr[comp] {
			h.arr[i], h.arr[comp] = h.arr[comp], h.arr[i]
			i = comp
			continue
		}
		return
	}
}